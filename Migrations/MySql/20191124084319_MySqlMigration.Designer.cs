// <auto-generated />
using System;
using HordeFlow.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace HordeFlow.Migrations.MySql
{
    [DbContext(typeof(TenantMySqlDbContext))]
    [Migration("20191124084319_MySqlMigration")]
    partial class MySqlMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("HordeFlow.Models.Tenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<byte[]>("ConcurrencyStamp")
                        .HasColumnType("longblob");

                    b.Property<DateTime?>("ConcurrencyTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ConnectionString")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("DatabaseProvider")
                        .IsRequired()
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("HostName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("IsDedicated")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(50) CHARACTER SET utf8mb4")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Tenant");
                });

            modelBuilder.Entity("HordeFlow.Models.tblARCustomer", b =>
                {
                    b.Property<int>("intEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime?>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp(6)");

                    b.Property<DateTime?>("ConcurrencyTimeStamp")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<decimal?>("dblARBalance")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal?>("dblCreditLimit")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("strAccountNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strCurrency")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strCustomerNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strTaxNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("intEntityId");

                    b.ToTable("tblARCustomer");
                });

            modelBuilder.Entity("HordeFlow.Models.tblSMCompanyLocation", b =>
                {
                    b.Property<int>("intCompanyLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("strAddress")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strCity")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strCountry")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strEmail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strFax")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strLocationName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strLocationNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strLocationType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strPhone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strStateProvince")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strWebsite")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("strZipPostalCode")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("intCompanyLocationId");

                    b.ToTable("tblSMCompanyLocation");
                });
#pragma warning restore 612, 618
        }
    }
}
